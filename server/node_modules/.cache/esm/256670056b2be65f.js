let mapSchema,getDirective,MapperKind,defaultFieldResolver,ensureSignedIn,ensureSignedOut;_6b2‍.x([["authDirective",()=>authDirective],["guestDirective",()=>guestDirective],["upperDirective",()=>upperDirective]]);_6b2‍.w("@graphql-tools/utils",[["mapSchema",["mapSchema"],function(v){mapSchema=v}],["getDirective",["getDirective"],function(v){getDirective=v}],["MapperKind",["MapperKind"],function(v){MapperKind=v}]]);_6b2‍.w("graphql",[["defaultFieldResolver",["defaultFieldResolver"],function(v){defaultFieldResolver=v}]]);_6b2‍.w("../auth",[["ensureSignedIn",["ensureSignedIn"],function(v){ensureSignedIn=v}],["ensureSignedOut",["ensureSignedOut"],function(v){ensureSignedOut=v}]]);



// validate args id with directive ....
// export const objectIdDirective = (schema, directiveName) => {
//   return mapSchema(schema, {
//     [MapperKind.OBJECT_FIELD]: (fieldConfig) => {
//       const directive = getDirective(schema, fieldConfig, directiveName)
//       if (directive) {
//         const { resolve = defaultFieldResolver } = fieldConfig
//         fieldConfig.resolve = async function (source, args, context, info) {
//           const result = await resolve(source, args, context, info)
//           if (!mongoose.Types.ObjectId.isValid(args.postId)) {
//             throw new UserInputError('id is not a valid user ID')
//           }
//           return result
//         }
//         return fieldConfig
//       }
//     }
//   })
// }

       const authDirective = (schema, directiveName) => {
  return mapSchema(schema, {
    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {
      const directive = getDirective(schema, fieldConfig, directiveName)
      if (directive) {
        const { resolve = defaultFieldResolver } = fieldConfig
        fieldConfig.resolve = async function (source, args, context, info) {
          const result = await resolve(source, args, context, info)
          ensureSignedIn(context.req)
          return result
        }
        return fieldConfig
      }
    }
  })
}

       const guestDirective = (schema, directiveName) => {
  return mapSchema(schema, {
    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {
      const directive = getDirective(schema, fieldConfig, directiveName)
      if (directive) {
        const { resolve = defaultFieldResolver } = fieldConfig
        fieldConfig.resolve = async function (source, args, context, info) {
          const result = await resolve(source, args, context, info)
          ensureSignedOut(context.req)
          return result
        }
        return fieldConfig
      }
    }
  })
}

       const upperDirective = (schema, directiveName) => {
  return mapSchema(schema, {
    [MapperKind.OBJECT_FIELD]: (fieldConfig) => {
      const directive = getDirective(schema, fieldConfig, directiveName)
      if (directive) {
        const { resolve = defaultFieldResolver } = fieldConfig
        fieldConfig.resolve = async function (source, args, context, info) {
          const result = await resolve(source, args, context, info)
          _6b2‍.g.console.log(result)
          if (typeof result === 'string') {
            return result.toUpperCase()
          }
        }
        return fieldConfig
      }
    }
  })
}
