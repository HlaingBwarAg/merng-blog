let AuthenticationError,User,SESS_NAME,SESS_LIFETIME;_ede‍.x([["attemptSignIn",()=>attemptSignIn],["ensureSignedIn",()=>ensureSignedIn],["ensureSignedOut",()=>ensureSignedOut],["signOut",()=>signOut]]);_ede‍.w("apollo-server-express",[["AuthenticationError",["AuthenticationError"],function(v){AuthenticationError=v}]]);_ede‍.w("./models",[["User",["User"],function(v){User=v}]]);_ede‍.w("./config",[["SESS_NAME",["SESS_NAME"],function(v){SESS_NAME=v}],["SESS_LIFETIME",["SESS_LIFETIME"],function(v){SESS_LIFETIME=v}]]);



       const attemptSignIn = async (email, password) => {
  const user = await User.findOne({ email })
  if (!user || !(await user.matchesPassword(password))) {
    throw new AuthenticationError(
      'Incorrect email or password. Please try again.'
    )
  }
  return user
}
const signedIn = req => req.session && req.session.userId

       const ensureSignedIn = (req) => {
  if (!signedIn(req)) {
    throw new AuthenticationError('You must be signed in.')
  }
}

// guest
       const ensureSignedOut = (req) => {
  const date = new Date(new Date().setTime(new Date().getTime() + (SESS_LIFETIME))).getSeconds()
  const expire = req.session.cookie._expires.getSeconds()
  if (expire !== date) {
    if (signedIn(req)) {
      throw new AuthenticationError('You are already signed in.')
    }
  }
}

       const signOut = (req, res) => new Promise((resolve, reject) => {
  res.clearCookie(SESS_NAME)
  req.session.destroy(err => {
    if (err) reject(err)
    // res.clearCookie(SESS_NAME)
    resolve(true)
  })

  // try {
  //   req.session = null
  //   res.clearCookie(SESS_NAME)
  //   resolve(true)
  // } catch (error) {
  //   reject(error)
  // }
})
