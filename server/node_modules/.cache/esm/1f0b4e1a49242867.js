let ApolloServer,makeExecutableSchema,ApolloServerPluginLandingPageGraphQLPlayground,express,session,connectRedis,Redis,typeDefs,resolvers,auth,guest,upper,SESS_OPTIONS,IN_PROD,REDIS_HOST,REDIS_PORT,REDIS_PASSWORD;_492‍.x([["default",()=>_492‍.o]]);_492‍.w("apollo-server-express",[["ApolloServer",["ApolloServer"],function(v){ApolloServer=v}]]);_492‍.w("@graphql-tools/schema",[["makeExecutableSchema",["makeExecutableSchema"],function(v){makeExecutableSchema=v}]]);_492‍.w("apollo-server-core",[["ApolloServerPluginLandingPageGraphQLPlayground",["ApolloServerPluginLandingPageGraphQLPlayground"],function(v){ApolloServerPluginLandingPageGraphQLPlayground=v}]]);_492‍.w("express",[["default",["express"],function(v){express=v}]]);_492‍.w("express-session",[["default",["session"],function(v){session=v}]]);_492‍.w("connect-redis",[["default",["connectRedis"],function(v){connectRedis=v}]]);_492‍.w("ioredis",[["default",["Redis"],function(v){Redis=v}]]);_492‍.w("./typeDefs",[["default",["typeDefs"],function(v){typeDefs=v}]]);_492‍.w("./resolvers",[["default",["resolvers"],function(v){resolvers=v}]]);_492‍.w("./directives",[["auth",["auth"],function(v){auth=v}],["guest",["guest"],function(v){guest=v}],["upper",["upper"],function(v){upper=v}]]);_492‍.w("./config",[["SESS_OPTIONS",["SESS_OPTIONS"],function(v){SESS_OPTIONS=v}],["IN_PROD",["IN_PROD"],function(v){IN_PROD=v}],["REDIS_HOST",["REDIS_HOST"],function(v){REDIS_HOST=v}],["REDIS_PORT",["REDIS_PORT"],function(v){REDIS_PORT=v}],["REDIS_PASSWORD",["REDIS_PASSWORD"],function(v){REDIS_PASSWORD=v}]]);











const createApp = async () => {
  try {
    const app = express()

    const RedisStore = connectRedis(session)
    const store = new RedisStore({
      client: new Redis({
        host: REDIS_HOST,
        port: REDIS_PORT,
        pass: REDIS_PASSWORD
      })
    })
    const sessionHandler = session({ store, ...SESS_OPTIONS })

    app.disable('x-powered-by')
    app.use(sessionHandler)
    app.set('trust proxy', process.env.NODE_ENV !== 'production')

    let schema = makeExecutableSchema({
      typeDefs,
      resolvers
    })
    schema = auth(schema, 'auth')
    schema = guest(schema, 'guest')
    schema = upper(schema, 'upper')

    const server = new ApolloServer({
      schema,
      cors: false,
      plugins: [
        ApolloServerPluginLandingPageGraphQLPlayground()
      ],
      introspection: !IN_PROD,
      playground: IN_PROD ? false : { settings: { 'request.credentials': 'include' } },
      context: ({ req, res }) => ({ req, res })
    })

    await server.start()

    server.applyMiddleware({ app, path: '/graphql', cors: { origin: ['https://studio.apollographql.com', 'http://localhost:4000'], credentials: true } })
    app.listen({ port: process.env.PORT },
      () => console.log(`http://localhost:${process.env.PORT}${server.graphqlPath}`)
    )
  } catch (error) {
    _492‍.g.console.log(error)
  }
}
_492‍.d(createApp);
