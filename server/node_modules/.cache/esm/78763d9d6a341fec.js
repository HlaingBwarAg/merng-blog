let UserInputError,Like,Post,validateObjectId;_6a3‍.x([["default",()=>_6a3‍.o]]);_6a3‍.w("apollo-server-express",[["UserInputError",["UserInputError"],function(v){UserInputError=v}]]);_6a3‍.w("../models",[["Like",["Like"],function(v){Like=v}],["Post",["Post"],function(v){Post=v}]]);_6a3‍.w("../validator",[["validateObjectId",["validateObjectId"],function(v){validateObjectId=v}]]);


const resolvers = {
  Query: {
    likes: async (parent, args, context, info) => {
      const like = await Like.find().populate('author')
      return like
    }
  },
  Mutation: {
    likePost: async (parent, { postId }, { req }, info) => {
      const { userId } = req.session
      validateObjectId(postId)
      const post = await Post.findById(postId)
      if (post) {
        const likedAuthor = await Like.find({}).populate('author')
        const match = likedAuthor.find(like => like.author._id.toString() === userId)
        if (match) {
          await Like.deleteOne(match)
          await Post.findByIdAndUpdate(
            { _id: postId },
            { $pull: { likes: match._id } },
            { new: true }
          )
          return 'Unlike'
        } else {
          let like = await Like.create({ author: userId, likes: post.likes.length + 1 })
          like = await like.populate('author')
          await Post.findByIdAndUpdate(
            { _id: postId },
            { $push: { likes: like._id } },
            { new: true }
          )
          return 'liked'
        }
      } else {
        throw new UserInputError('Post Not Found')
      }
    }
  }
}

_6a3‍.d(resolvers);
// if (post) {
//   const match = post.likes.find(id => id.toString() === userId)
//   if (match) {
//     await Like.deleteOne({ author: match })
//     const likedPost = await Post.findByIdAndUpdate(
//       { _id: postId },
//       { $pull: { likes: userId } },
//       { new: true }
//     ).populate('author')
//     await likedPost.save()
//     await likedPost.populate({ path: 'likes', populate: { path: 'author' } })
//     return post
//   } else {
//     await Like.create({ author: userId, likes: post.likes.length + 1 })
//     const likedPost = await Post.findByIdAndUpdate(
//       { _id: postId },
//       { $push: { likes: userId } },
//       { new: true }
//     ).populate('author')
//     await likedPost.save()
//     await likedPost.populate({ path: 'likes', populate: { path: 'author' } })
//     return likedPost
//   }
// } else {
//   throw new UserInputError('Post Not Found')
// }
